"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBody = getBody;
exports.getURL = getURL;
exports.setCookie = setCookie;

function setCookie(res, value) {
  var _res$getHeader;

  let setCookieHeader = (_res$getHeader = res.getHeader("Set-Cookie")) !== null && _res$getHeader !== void 0 ? _res$getHeader : [];

  if (!Array.isArray(setCookieHeader)) {
    setCookieHeader = [setCookieHeader];
  }

  setCookieHeader.push(value);
  res.setHeader("Set-Cookie", setCookieHeader);
}

function getBody(req) {
  if (!("body" in req) || !req.body || req.method !== "POST") {
    return;
  }

  if (req.body instanceof ReadableStream) {
    return {
      body: req.body
    };
  }

  return {
    body: JSON.stringify(req.body)
  };
}

function getURL(url, trusted = !!(() => {
  var _process$env$AUTH_TRU;

  return (_process$env$AUTH_TRU = process.env.AUTH_TRUST_HOST) !== null && _process$env$AUTH_TRU !== void 0 ? _process$env$AUTH_TRU : process.env.VERCEL;
})(), forwardedValue) {
  try {
    var _process$env$NEXTAUTH;

    let host = (_process$env$NEXTAUTH = process.env.NEXTAUTH_URL) !== null && _process$env$NEXTAUTH !== void 0 ? _process$env$NEXTAUTH : process.env.NODE_ENV !== "production" && "http://localhost:3000";

    if (trusted && forwardedValue) {
      host = Array.isArray(forwardedValue) ? forwardedValue[0] : forwardedValue;
    }

    if (!host) throw new TypeError("Invalid host");
    if (!url) throw new TypeError("Invalid URL, cannot determine action");

    if (host.startsWith("http://") || host.startsWith("https://")) {
      return new URL(`${host}${url}`);
    }

    return new URL(`https://${host}${url}`);
  } catch (error) {
    return error;
  }
}